/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.0
 * source: chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace pixalquarks.terminalChatServer {
    export class FromClient extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get body() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            body?: string;
        }) {
            const message = new FromClient({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                body?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.body === "string" && this.body.length)
                writer.writeString(2, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromClient {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromClient();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FromClient {
            return FromClient.deserialize(bytes);
        }
    }
    export class FromServer extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get body() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            body?: string;
        }) {
            const message = new FromServer({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                body?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (typeof this.body === "string" && this.body.length)
                writer.writeString(2, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FromServer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FromServer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): FromServer {
            return FromServer.deserialize(bytes);
        }
    }
    export class Client extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get id() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            name?: string;
            id?: number;
        }) {
            const message = new Client({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                id?: number;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (this.id !== undefined)
                writer.writeInt32(2, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Client {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Client();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.id = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Client {
            return Client.deserialize(bytes);
        }
    }
    export class Clients extends pb_1.Message {
        constructor(data?: any[] | {
            client?: Client[];
            count?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("client" in data && data.client != undefined) {
                    this.client = data.client;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
            }
        }
        get client() {
            return pb_1.Message.getRepeatedWrapperField(this, Client, 1) as Client[];
        }
        set client(value: Client[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get count() {
            return pb_1.Message.getField(this, 2) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            client?: ReturnType<typeof Client.prototype.toObject>[];
            count?: number;
        }) {
            const message = new Clients({});
            if (data.client != null) {
                message.client = data.client.map(item => Client.fromObject(item));
            }
            if (data.count != null) {
                message.count = data.count;
            }
            return message;
        }
        toObject() {
            const data: {
                client?: ReturnType<typeof Client.prototype.toObject>[];
                count?: number;
            } = {};
            if (this.client != null) {
                data.client = this.client.map((item: Client) => item.toObject());
            }
            if (this.count != null) {
                data.count = this.count;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.client !== undefined)
                writer.writeRepeatedMessage(1, this.client, (item: Client) => item.serialize(writer));
            if (this.count !== undefined)
                writer.writeUint32(2, this.count);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Clients {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Clients();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.client, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Client.deserialize(reader), Client));
                        break;
                    case 2:
                        message.count = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Clients {
            return Clients.deserialize(bytes);
        }
    }
    export class Command extends pb_1.Message {
        constructor(data?: any[] | {
            type?: number;
            value?: string;
            client?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("client" in data && data.client != undefined) {
                    this.client = data.client;
                }
            }
        }
        get type() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get client() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set client(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            type?: number;
            value?: string;
            client?: string;
        }) {
            const message = new Command({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.client != null) {
                message.client = data.client;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: number;
                value?: string;
                client?: string;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.client != null) {
                data.client = this.client;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type !== undefined)
                writer.writeUint32(1, this.type);
            if (typeof this.value === "string" && this.value.length)
                writer.writeString(2, this.value);
            if (typeof this.client === "string" && this.client.length)
                writer.writeString(3, this.client);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Command {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Command();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readUint32();
                        break;
                    case 2:
                        message.value = reader.readString();
                        break;
                    case 3:
                        message.client = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Command {
            return Command.deserialize(bytes);
        }
    }
    export class ClientName extends pb_1.Message {
        constructor(data?: any[] | {
            name?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
            }
        }
        get name() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            name?: string;
        }) {
            const message = new ClientName({});
            if (data.name != null) {
                message.name = data.name;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientName {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientName();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientName {
            return ClientName.deserialize(bytes);
        }
    }
    export class ClientNameResponse extends pb_1.Message {
        constructor(data?: any[] | {
            exists?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("exists" in data && data.exists != undefined) {
                    this.exists = data.exists;
                }
            }
        }
        get exists() {
            return pb_1.Message.getField(this, 1) as boolean;
        }
        set exists(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            exists?: boolean;
        }) {
            const message = new ClientNameResponse({});
            if (data.exists != null) {
                message.exists = data.exists;
            }
            return message;
        }
        toObject() {
            const data: {
                exists?: boolean;
            } = {};
            if (this.exists != null) {
                data.exists = this.exists;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.exists !== undefined)
                writer.writeBool(1, this.exists);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClientNameResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientNameResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.exists = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ClientNameResponse {
            return ClientNameResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedServicesService {
        static definition = {
            ChatService: {
                path: "/pixalquarks.terminalChatServer.Services/ChatService",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: FromClient) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => FromClient.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: FromServer) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => FromServer.deserialize(new Uint8Array(bytes))
            },
            CommandService: {
                path: "/pixalquarks.terminalChatServer.Services/CommandService",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Command) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Command.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes))
            },
            GetClients: {
                path: "/pixalquarks.terminalChatServer.Services/GetClients",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Clients) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Clients.deserialize(new Uint8Array(bytes))
            },
            VerifyName: {
                path: "/pixalquarks.terminalChatServer.Services/VerifyName",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ClientName) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ClientName.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ClientNameResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ClientNameResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract ChatService(call: grpc_1.ServerDuplexStream<FromClient, FromServer>): void;
        abstract CommandService(call: grpc_1.ServerUnaryCall<Command, dependency_1.google.protobuf.Empty>, callback: grpc_1.sendUnaryData<dependency_1.google.protobuf.Empty>): void;
        abstract GetClients(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, Clients>, callback: grpc_1.sendUnaryData<Clients>): void;
        abstract VerifyName(call: grpc_1.ServerUnaryCall<ClientName, ClientNameResponse>, callback: grpc_1.sendUnaryData<ClientNameResponse>): void;
    }
    export class ServicesClient extends grpc_1.makeGenericClientConstructor(UnimplementedServicesService.definition, "Services", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        ChatService: GrpcChunkServiceInterface<FromClient, FromServer> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<FromClient, FromServer> => {
            return super.ChatService(metadata, options);
        };
        CommandService: GrpcUnaryServiceInterface<Command, dependency_1.google.protobuf.Empty> = (message: Command, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<dependency_1.google.protobuf.Empty>, callback?: grpc_1.requestCallback<dependency_1.google.protobuf.Empty>): grpc_1.ClientUnaryCall => {
            return super.CommandService(message, metadata, options, callback);
        };
        GetClients: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, Clients> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Clients>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Clients>, callback?: grpc_1.requestCallback<Clients>): grpc_1.ClientUnaryCall => {
            return super.GetClients(message, metadata, options, callback);
        };
        VerifyName: GrpcUnaryServiceInterface<ClientName, ClientNameResponse> = (message: ClientName, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ClientNameResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ClientNameResponse>, callback?: grpc_1.requestCallback<ClientNameResponse>): grpc_1.ClientUnaryCall => {
            return super.VerifyName(message, metadata, options, callback);
        };
    }
}
